// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  password          String?
  email             String?                @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  favouritesPokemon PokemonFavouriteUser[]
  comments          PokemonComment[]
  likes             PokemonCommentLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PokemonFavouriteUser {
  pokemonId String
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([pokemonId, userId])
  @@index([userId])
}

model PokemonComment {
  id        String               @id @default(cuid())
  pokemonId String
  comment   String
  authorId  String
  createdAt DateTime             @default(now())
  author    User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     PokemonCommentLike[]

  @@index([authorId])
}

model PokemonCommentLike {
  userId    String
  commentId String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   PokemonComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
